{"version":3,"sources":["assets/studio-ghibli-logo.png","store/films/types.ts","store/films/reducers.ts","store/peoples/types.ts","store/peoples/reducers.ts","store/locations/types.ts","store/locations/reducers.ts","store/species/types.ts","store/species/reducers.ts","store/vehicles/types.ts","store/vehicles/reducers.ts","store/index.ts","components/Header.tsx","utils/mergeArray.ts","store/films/actions.ts","components/Loader.tsx","pages/films/Films.tsx","pages/films/FilmDetail.tsx","store/peoples/actions.ts","pages/peoples/Peoples.tsx","pages/peoples/PeopleDetail.tsx","store/locations/actions.ts","pages/locations/Locations.tsx","pages/locations/LocationDetail.tsx","store/species/actions.ts","pages/species/Species.tsx","pages/species/SpeciesDetail.tsx","store/vehicles/actions.ts","pages/vehicles/Vehicles.tsx","pages/vehicles/VehicleDetail.tsx","routes.tsx","Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","FilmsActionTypes","PeoplesActionTypes","initialState","data","LocationsActionTypes","SpeciesActionTypes","VehiclesActionTypes","rootReducer","combineReducers","peoples","state","arguments","length","undefined","action","type","FETCH_PEOPLES","Object","objectSpread","payload","FETCH_DETAIL_PEOPLE","concat","toConsumableArray","films","FETCH_FILMS","locations","FETCH_LOCATIONS","species","FETCH_SPECIES","vehicles","FETCH_VEHICLES","Header","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","open","handleCollapseNav","bind","assertThisInitialized","setState","_this2","react_default","a","createElement","className","dist","style","marginBottom","active","Brand","Link","to","src","GhibliIcon","alt","Burger","onClick","Menu","NavLink","exact","Component","mergeArray","source","merge","by","map","item","find","i","FILM_API","fetchFilms","dispatch","fetch","then","response","ok","json","Error","filmsDispatch","catch","error","console","filmsImage","LoaderWrapper","width","height","border","borderTopColor","borderRightColor","Films","truncateText","text","substring","react","film","index","Column","key","size","id","Content","image","name","title","release_date","description","Loader","React","connect","bindActionCreators","FilmDetail","detail","match","params","director","producer","rt_score","PEOPLE_API","peoplesFetchRequest","addFetchPeople","peoplesImage","Peoples","isLoading","people","gender","age","eye_color","hair_color","PeopleDetail","LOCATIONS_API","fetchLocations","locationsDispatch","locationImage","Locations","location","pathname","climate","terrain","surface_water","LocationDetail","SPECIES_API","fetchSpecies","speciesDispatch","Species","specie","classification","eye_colors","hair_colors","SpeciesDetail","VEHICLES_API","fetchVehicles","vehiclesDispatch","vehiclesImage","Vehicles","vehicle","vehicles_colors","VehicleDetail","vehicle_class","Routes","Switch","Route","path","component","FilmsPage","PeoplesPage","render","peoples_PeopleDetail","LocationsPage","SpeciesPage","VehiclesPage","Main","routes","App","components_Header","src_Main","isLocalhost","Boolean","window","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","es","BrowserRouter","basename","process","src_App","document","getElementById","URL","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a6ae6995.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/studio-ghibli-logo.f456ee18.png\";","export enum FilmsActionTypes {\n  FETCH_FILMS = 'FETCH_FILMS',\n  FETCH_DETAIL_FILMS = 'FETCH_DETAIL_FILMS'\n}","import { FilmsActionTypes } from './types'\n\nconst initialState: any = {\n  data: []\n}\n\nexport default function(state = initialState, action: any) {\n  switch(action.type) {\n    case FilmsActionTypes.FETCH_FILMS:\n      return {...state, data: action.payload}\n    default:\n      return state\n  }\n}","export enum PeoplesActionTypes{\n  FETCH_PEOPLES = 'FETCH_PEOPLES',\n  FETCH_DETAIL_PEOPLE = 'FETCH_DETAIL_PEOPLE'\n}","import { PeoplesActionTypes } from './types'\n\nlet initialState: any = {\n  data: []\n}\n\nexport default function peoplesReducer(state = initialState, action: any) {\n  switch(action.type) {\n    case PeoplesActionTypes.FETCH_PEOPLES:\n      return {...state, data: action.payload}\n    case PeoplesActionTypes.FETCH_DETAIL_PEOPLE:\n      // return Object.assign({}, state, action.payload)\n      return [...state, action.payload]\n    default:\n      return state\n  }\n}","export enum LocationsActionTypes {\n  FETCH_LOCATIONS = 'FETCH_LOCATIONS',\n  FETCH_DETAIL_LOCATIONS = 'FETCH_DETAIL_LOCATIONS'\n}","import { LocationsActionTypes } from './types'\n\nconst initialState: any = {\n  data: []\n}\n\nexport default function(state = initialState, action: any) {\n  switch(action.type) {\n    case LocationsActionTypes.FETCH_LOCATIONS:\n      return {...state, data: action.payload}\n    default:\n      return state\n  }\n}","export enum SpeciesActionTypes {\n  FETCH_SPECIES = 'FETCH_SPECIES',\n  FETCH_DETAIL_SPECIES = 'FETCH_DETAIL_SPECIES'\n}","import { SpeciesActionTypes } from './types'\n\nconst initialState: any = {\n  data: []\n}\n\nexport default function(state = initialState, action: any) {\n  switch(action.type) {\n    case SpeciesActionTypes.FETCH_SPECIES:\n      return {...state, data: action.payload}\n    default:\n      return state\n  }\n}","export enum VehiclesActionTypes {\n  FETCH_VEHICLES = 'FETCH_VEHICLES',\n  FETCH_DETAIL_VEHICLES = 'FETCH_DETAIL_VEHICLES'\n}","import { VehiclesActionTypes } from './types'\n\nconst initialState: any = {\n  data: []\n}\n\nexport default function(state = initialState, action: any) {\n  switch(action.type) {\n    case VehiclesActionTypes.FETCH_VEHICLES:\n      return {...state, data: action.payload}\n    default:\n      return state\n  }\n}","import { combineReducers } from 'redux'\nimport filmsReducer from './films/reducers'\nimport peoplesReducer from './peoples/reducers'\nimport locationsReducer from './locations/reducers'\nimport speciesReducer from './species/reducers'\nimport vehiclesReducer from './vehicles/reducers'\n\nconst rootReducer = combineReducers({\n  peoples: peoplesReducer,\n  films: filmsReducer,\n  locations: locationsReducer,\n  species: speciesReducer,\n  vehicles: vehiclesReducer\n})\n\nexport default rootReducer\n\n","import React, { Component } from 'react'\nimport { NavLink, Link } from 'react-router-dom'\nimport { Navbar, Container } from 'react-bulma-components'\nimport GhibliIcon from '../assets/studio-ghibli-logo.png'\n\ninterface TProps {\n}\n\ninterface TState {\n  open: boolean\n}\nclass Header extends Component<TProps, TState> {\n  constructor(props: any) {\n    super(props)\n\n    this.state = {\n      open: false\n    }\n\n    this.handleCollapseNav = this.handleCollapseNav.bind(this)\n  }\n\n  handleCollapseNav() {\n    this.setState({open: false})\n  }\n\n\n  render() {\n    return (\n      <div className=\"header\">\n        <Container>\n          <Navbar style={{ marginBottom: '20px' }} active={this.state.open}>\n            <Navbar.Brand>\n              <Link to=\"/\"><img src={GhibliIcon} alt=\"Ghibli's Studio\" /></Link>\n            </Navbar.Brand>\n            <Navbar.Burger\n              onClick={() =>\n                this.setState((state) => ({ open: !state.open}))\n              }\n            />\n\n            <Navbar.Menu>\n              <NavLink exact to=\"/\" onClick={this.handleCollapseNav}>Films</NavLink>\n              <NavLink to=\"/people\" onClick={this.handleCollapseNav}>People</NavLink>\n              <NavLink to=\"/locations\" onClick={this.handleCollapseNav}>Locations</NavLink>\n              <NavLink to=\"/species\" onClick={this.handleCollapseNav}>Species</NavLink>\n              <NavLink to=\"/vehicles\" onClick={this.handleCollapseNav}>Vehicles</NavLink>\n            </Navbar.Menu>\n          </Navbar>\n        </Container>\n      </div>\n    )\n  }\n}\n\nexport default Header;","export const mergeArray = (source: any, merge: any, by: any) => source.map((item: any) => ({\n  ...item,\n  ...(merge.find((i: any) => i[by] === item[by]) || {}),\n}))","import { FilmsActionTypes } from './types'\nimport { mergeArray } from '../../utils/mergeArray'\nimport filmsImage from '../../data/films.json'\n\nconst API_BASE = 'https://ghibliapi.herokuapp.com'\nconst FILM_API = `${API_BASE}/films`\n\nexport function fetchFilms() {\n  return function(dispatch: any) {\n    return fetch(FILM_API)\n      .then(response => {\n        if (response.ok) {\n          return response.json()\n        } else {\n          throw new Error('There is something wrong')\n        }\n      })\n      .then(films => {\n        dispatch(filmsDispatch(films))\n      })\n      .catch((error: string) => {\n        console.error(error)\n      })\n  }\n}\n\nconst filmsDispatch = (films: any) => ({\n  type: FilmsActionTypes.FETCH_FILMS,\n  payload: mergeArray(films, filmsImage, 'id')\n})","import React from 'react'\nimport { Loader } from 'react-bulma-components'\n\nconst LoaderWrapper = () => {\n  return (\n    <div className=\"loader-container\">\n      <Loader\n        style={{\n          width: 50,\n          height: 50,\n          border: '3px solid #dbdbdb',\n          borderTopColor: 'transparent',\n          borderRightColor: 'transparent'\n        }}\n      />\n    </div>\n  )\n}\n\nexport default LoaderWrapper","import * as React from 'react';\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { fetchFilms } from '../../store/films/actions'\nimport { Link } from 'react-router-dom'\nimport { Container, Columns, Content, Card, Image } from 'react-bulma-components'\nimport LoaderWrapper from '../../components/Loader'\n\ninterface TProps {\n  films: [],\n  fetchFilms: () => void\n}\n\ninterface TState {\n}\n\ninterface TFilm {\n  id: number,\n  image: string,\n  name: string,\n  title: string,\n  release_date: string,\n  description: string\n}\n\nclass Films extends React.Component<TProps, TState> {\n  constructor(props: any) {\n    super(props)\n\n    this.truncateText = this.truncateText.bind(this)\n  }\n\n  componentDidMount() {\n    this.props.fetchFilms()\n  }\n\n  truncateText(text: string) {\n    if(text.length > 350) return text.substring(0,350)+'...'\n\n    return text\n  }\n\n  render(): React.ReactNode {\n    const { films } = this.props\n\n    return (\n      <Container className=\"container--film\">\n        <h1 className=\"container__header\">List of Ghibli's Films</h1>\n        <Columns>\n          {\n            films.length !== 0 ?\n            films.map((film: TFilm, index: number) => {\n              return (\n                <Columns.Column key={index} size={12}>\n                  <Link to={`/films/${film.id}`}>\n                    <Card>\n                      <Card.Content>\n                        <Image src={film.image} alt={film.name} className=\"is-128x128\" />\n                        <Content>\n                          <h1>{film.title} <span>({film.release_date})</span></h1>\n                          <p>{this.truncateText(film.description)}</p>\n                        </Content>\n                      </Card.Content>\n                    </Card>\n                  </Link>\n                </Columns.Column>\n              )\n            })\n            :\n            <LoaderWrapper/>\n          }\n        </Columns>\n      </Container>\n    );\n  }\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    films: state.films.data\n  }\n}\n\nfunction mapDispatchToProps(dispatch: any) {\n  return bindActionCreators({ fetchFilms }, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Films)\n","import React, { Component} from 'react';\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { fetchFilms } from '../../store/films/actions'\nimport { Container, Columns, Content, Card, Image } from 'react-bulma-components'\nimport LoaderWrapper from '../../components/Loader'\n\ninterface TProps {\n  films: any,\n  fetchFilms: any,\n  match: any\n}\n\ninterface TState {\n}\n\nclass FilmDetail extends Component<TProps, TState> {\n  constructor(props: any) {\n    super(props)\n\n  }\n\n  componentDidMount() {\n    this.props.fetchFilms()\n  }\n\n  render() {\n    const { films } = this.props;\n    const detail = films.find((film: any) => film.id === this.props.match.params.id)\n    \n    return (\n      <Container>\n        <h1 className=\"container__header\">Film Detail</h1>\n        <Columns>\n          { detail ?\n            <Columns.Column size={12}>\n              <Card>\n                <Card.Content>\n                  <Image src={detail.image} alt={detail.name} className=\"is-128x128\" />\n                  <Content>\n                    <h1>{detail.title}</h1>\n                    <p className=\"detail-description\">{detail.description}</p>\n                    <p><span>Director:</span> {detail.director}</p>\n                    <p><span>Producer:</span> {detail.producer}</p>\n                    <p><span>Release Date:</span> {detail.release_date}</p>\n                    <p><span>RT Score:</span> {detail.rt_score}</p>\n                  </Content>\n                </Card.Content>\n              </Card>\n            </Columns.Column>\n            :\n            <LoaderWrapper/>\n          }\n        </Columns>\n      </Container>\n    )\n    \n  }\n\n}\nfunction mapStateToProps(state: any) {\n  return {\n    films: state.films.data\n  }\n}\n\nfunction mapDispatchToProps(dispatch: any) {\n  return bindActionCreators({ fetchFilms }, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FilmDetail)","import { PeoplesActionTypes } from './types'\nimport { mergeArray } from '../../utils/mergeArray'\nimport peoplesImage from '../../data/peoples.json'\n\nconst API_BASE = 'https://ghibliapi.herokuapp.com'\nconst PEOPLE_API = `${API_BASE}/people?limit=10`\n\nexport function peoplesFetchRequest() {\n  return function(dispatch: any) {\n    return fetch(PEOPLE_API)\n      .then(response => {\n        if (response.ok) {\n          return response.json()\n        } else {\n          throw new Error('There is something wrong')\n        }\n      })\n      .then(data => {\n        dispatch(addFetchPeople(data))\n      })\n      .catch((error: string) => {\n        console.error(error)\n      })\n  }\n}\n\n\nconst addFetchPeople = (data: any) => ({\n  type: PeoplesActionTypes.FETCH_PEOPLES,\n  payload: mergeArray(data, peoplesImage, 'id')\n})\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { peoplesFetchRequest } from '../../store/peoples/actions'\nimport { Route , Link } from 'react-router-dom'\n\nimport { Container, Columns, Content, Card, Image } from 'react-bulma-components'\nimport LoaderWrapper from '../../components/Loader'\nimport peoplesImage from '../../data/peoples.json'\n\n// const API_BASE = 'https://ghibliapi.herokuapp.com'\n// const PEOPLE_API = `${API_BASE}/people?limit=10`\n\n\ninterface TProps {\n  dispatch: any,\n  peoplesFetchRequest: any,\n  peoples: any\n}\ninterface TState {\n  data: any,\n  peoplesFetchRequest: any,\n  isLoading: boolean,\n  error: null\n}\nclass Peoples extends Component<TProps, TState> {\n  constructor(props: any) {\n    super(props)\n\n    this.state = {\n      data: null,\n      isLoading: false,\n      peoplesFetchRequest: null,\n      error: null\n    }\n  }\n\n  componentWillMount() {\n    this.props.peoplesFetchRequest()\n  }\n\n  // getData() {\n  //   fetch(PEOPLE_API)\n  //     .then(response => {\n  //       if (response.ok) {\n  //         return response.json()\n  //       } else {\n  //         throw new Error('Something went wrong')\n  //       }\n  //     })\n  //     .then((data) => {\n  //       this.setState({\n  //         data\n  //       })\n  //     })\n  //     .catch((error) => {\n  //       this.setState({\n  //         error,\n  //         isLoading: false\n  //       })\n  //     })\n  // }\n\n  render() {\n    const { peoples } = this.props\n    // if (error) {\n    //   return <p>{error}</p>\n    // }\n\n    // if (isLoading) {\n    //   return <p>Loading..</p>\n    // }\n\n    return (\n      <Container className=\"container--people\">\n        <h1 className=\"container__header\">List of character in Ghibli's film</h1>\n        <Columns>\n          {\n            peoples.length !== 0 ?\n              peoples.map((people: any, index: number) => {\n                return (\n                  <Columns.Column key={index} size={12}>\n                    <Link to={`people/${people.id}`}>\n                      <Card>\n                        <Card.Content>\n                          <Image src={people.image} alt={people.name} className=\"is-128x128\"/>\n                          <Content>\n                            <h1>{people.name}</h1>\n                            <p><span>Gender:</span> {people.gender}</p>\n                            <p><span>Age:</span> {people.age}</p>\n                            <p><span>Eye Color:</span> {people.eye_color}</p>\n                            <p><span>Hair Color:</span> {people.hair_color}</p>\n                          </Content>\n                        </Card.Content>\n                      </Card>\n                    </Link>\n                  </Columns.Column>\n                )\n              })\n              :\n              <LoaderWrapper/>\n          }\n        </Columns>\n      </Container>\n    );\n  }\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    peoples: state.peoples.data\n  }\n}\n\nfunction mapDispatchToProps(dispatch: any) {\n  return bindActionCreators({peoplesFetchRequest}, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Peoples);\n","import React, { Component} from 'react';\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { peoplesFetchRequest } from '../../store/peoples/actions'\nimport { Container, Columns, Content, Card, Image } from 'react-bulma-components'\nimport LoaderWrapper from '../../components/Loader'\n\ninterface TProps {\n  peoples: any,\n  peoplesFetchRequest: any,\n  peopleDetailFetch: any,\n  fetchPeoples: any,\n  match: any,\n  fetchDetail: any\n}\n\ninterface TState {\n  detail: any\n}\n\nclass PeopleDetail extends Component<TProps, TState> {\n  constructor(props: any) {\n    super(props)\n    \n    this.state = {\n      detail: undefined\n    }\n  }\n\n  componentDidMount() {\n    this.props.peoplesFetchRequest()\n  }\n\n  render() {\n    const { peoples } = this.props;\n    const detail = peoples.find((people: any) => people.id === this.props.match.params.id)\n\n    return (\n      <Container className=\"container--people\">\n        <h1 className=\"container__header\">Character Detail</h1>\n        <Columns>\n          { detail ?\n            <Columns.Column size={12}>\n                <Card>\n                  <Card.Content>\n                      <Image src={detail.image} alt={detail.name} className=\"is-128x128\"/>\n                      <Content>\n                        <h1>{detail.name}</h1>\n                        <p>Age: {detail.age}</p>\n                        <p>Gender: {detail.gender}</p>\n                        <p>Eye Color: {detail.eye_color}</p>\n                      </Content>\n                  </Card.Content>\n                </Card>\n            </Columns.Column>\n            :\n            <LoaderWrapper/>\n          }\n        </Columns>\n      </Container>\n    )\n    \n  }\n\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    peoples: state.peoples.data\n  }\n}\n\nfunction mapDispatchToProps(dispatch: any) {\n  return bindActionCreators({ peoplesFetchRequest}, dispatch)\n  // ...bindActionCreators({ peoplesFetchRequest, peopleDetailFetch }, dispatch)\n    \n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PeopleDetail)","import { LocationsActionTypes } from './types'\nimport { mergeArray } from '../../utils/mergeArray'\nimport locationImage from '../../data/locations.json'\n\nconst API_BASE = 'https://ghibliapi.herokuapp.com'\nconst LOCATIONS_API = `${API_BASE}/locations?limit=10`\n\nexport function fetchLocations() {\n  return function(dispatch: any) {\n    return fetch(LOCATIONS_API)\n      .then(response => {\n        if (response.ok) {\n          return response.json()\n        } else {\n          throw new Error('There is something wrong')\n        }\n      })\n      .then(locations => {\n        dispatch(locationsDispatch(locations))\n      })\n      .catch((error: string) => {\n        console.error(error)\n      })\n  }\n}\n\nconst locationsDispatch = (locations: any) => ({\n  type: LocationsActionTypes.FETCH_LOCATIONS,\n  payload: mergeArray(locations, locationImage, 'id')\n})","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { fetchLocations } from '../../store/locations/actions'\nimport { Link } from 'react-router-dom'\nimport { Container, Columns, Content, Card, Image } from 'react-bulma-components'\nimport LoaderWrapper from '../../components/Loader'\n\ninterface TProps {\n  locations: any,\n  fetchLocations: any\n}\ninterface TState {\n  data: any,\n  isLoading: boolean,\n  error: null\n}\nclass Locations extends Component<TProps, TState> {\n  constructor(props: any) {\n    super(props)\n\n    this.state = {\n      data: null,\n      isLoading: false,\n      error: null\n    }\n  }\n\n  componentDidMount() {\n    this.props.fetchLocations()\n  }\n\n  render() {\n    const { locations } = this.props\n\n    return (\n      <Container className=\"container--location\">\n        <h1 className=\"container__header\">List of location in Ghibli's film</h1>\n        <Columns>\n          {\n            locations.length !== 0 ?\n              locations.map((location: any, index: number) => {\n                return (\n                  <Columns.Column key={index} size={12}>\n                    <Link to={{ pathname: `locations/${location.id}`}}>\n                      <Card>\n                        <Card.Content>\n                          <Image src={location.image} alt={location.name} className=\"is-128x128\" />\n                          <Content>\n                            <h1>{location.name}</h1>\n                            <p><span>Climate:</span> {location.climate}</p>\n                            <p><span>Terrain:</span> {location.terrain}</p>\n                            <p><span>Surface Water:</span> {location.surface_water}</p>\n                          </Content>\n                        </Card.Content>\n                      </Card>\n                    </Link>\n                  </Columns.Column>\n                )\n              })\n              :\n              <LoaderWrapper/>\n          }\n        </Columns>\n\n      </Container>\n    );\n  }\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    locations: state.locations.data\n  }\n}\n\nfunction mapDispatchToProps(dispatch: any) {\n  return bindActionCreators({ fetchLocations }, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Locations)\n","import React, { Component} from 'react';\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { fetchLocations } from '../../store/locations/actions'\nimport { Container, Columns, Content, Card, Image } from 'react-bulma-components'\nimport LoaderWrapper from '../../components/Loader'\n\ninterface TProps {\n  locations: any,\n  fetchLocations: any,\n  match: any\n}\n\ninterface TState {\n  data: any\n}\n\nclass LocationDetail extends Component<TProps, TState> {\n  constructor(props: any) {\n    super(props)\n  }\n\n  componentDidMount() {\n    this.props.fetchLocations()\n  }\n\n  render() {\n    const { locations } = this.props;\n    const detail = locations.find((location: any) => location.id === this.props.match.params.id)\n    \n    return (\n      <Container className=\"container--location\">\n        <h1 className=\"container__header\">Location Description</h1>\n        <Columns>\n          { detail ?\n            <Columns.Column size={12}>\n              <Card>\n                <Card.Content>\n                  <Image src={detail.image} alt={detail.name} className=\"is-128x128\" />\n                  <Content>\n                    <h1>{detail.name}</h1>\n                    <p><span>Climate:</span> {detail.climate}</p>\n                    <p><span>Terrain:</span> {detail.terrain}</p>\n                    <p><span>Surface Water:</span> {detail.surface_water}</p>\n                  </Content>\n                </Card.Content>\n              </Card>\n            </Columns.Column>\n            :\n            <LoaderWrapper />\n          }\n        </Columns>\n      </Container>\n    )\n  }\n\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    locations: state.locations.data\n  }\n}\n\nfunction mapDispatchToProps(dispatch: any) {\n  return bindActionCreators({ fetchLocations }, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LocationDetail)","import { SpeciesActionTypes } from './types'\n\nconst API_BASE = 'https://ghibliapi.herokuapp.com'\nconst SPECIES_API = `${API_BASE}/species?limit=10`\n\nexport function fetchSpecies() {\n  return function(dispatch: any) {\n    return fetch(SPECIES_API)\n      .then(response => {\n        if (response.ok) {\n          return response.json()\n        } else {\n          throw new Error('There is something wrong')\n        }\n      })\n      .then(species => {\n        dispatch(speciesDispatch(species))\n      })\n      .catch((error: string) => {\n        console.error(error)\n      })\n  }\n}\n\nconst speciesDispatch = (species: any) => ({\n  type: SpeciesActionTypes.FETCH_SPECIES,\n  payload: species\n})","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { fetchSpecies } from '../../store/species/actions'\nimport { Link } from 'react-router-dom'\nimport { Container, Columns, Content, Card, Image } from 'react-bulma-components'\nimport LoaderWrapper from '../../components/Loader'\n\ninterface TProps {\n  species: any,\n  fetchSpecies: any\n}\ninterface TState {\n}\nclass Species extends Component<TProps, TState> {\n  constructor(props: any) {\n    super(props)\n  }\n\n  componentDidMount() {\n    this.props.fetchSpecies()\n  }\n\n  render() {\n    const { species } = this.props\n\n    return (\n      <Container className=\"container--species\">\n        <h1 className=\"container__header\">List of species in Ghibli's film</h1>\n        <Columns>\n          {\n            species.length !== 0 ?\n              species.map((specie: any, index: number) => {\n                return (\n                  <Columns.Column key={index} size={12}>\n                    <Link to={{ pathname: `species/${specie.id}`}}>\n                      <Card>\n                        <Card.Content>\n                          <Content>\n                            <h1>{specie.name}</h1>\n                            <p><span>Classification:</span> {specie.classification}</p>\n                            <p><span>Eye Colors:</span> {specie.eye_colors}</p>\n                            <p><span>Hair Colors:</span> {specie.hair_colors}</p>\n                          </Content>\n                        </Card.Content>\n                      </Card>\n                    </Link>\n                  </Columns.Column>\n                )\n              })\n              :\n              <LoaderWrapper/>\n          }\n        </Columns>\n\n      </Container>\n    );\n  }\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    species: state.species.data\n  }\n}\n\nfunction mapDispatchToProps(dispatch: any) {\n  return bindActionCreators({ fetchSpecies }, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Species)\n","import React, { Component} from 'react';\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { fetchSpecies } from '../../store/species/actions'\nimport { Container, Columns, Content, Card, Image } from 'react-bulma-components'\nimport LoaderWrapper from '../../components/Loader'\n\ninterface TProps {\n  species: any,\n  fetchSpecies: any,\n  match: any\n}\n\ninterface TState {\n  data: any\n}\n\nclass SpeciesDetail extends Component<TProps, TState> {\n  constructor(props: any) {\n    super(props)\n    \n    this.state = {\n      data: {}\n    }\n  }\n\n  componentDidMount() {\n    this.props.fetchSpecies()\n  }\n\n  render() {\n    const { species } = this.props;\n    const detail = species.find((specie: any) => specie.id === this.props.match.params.id)\n    \n    return (\n      <Container className=\"container--species\">\n        <h1 className=\"container__header\">Species Description</h1>\n        <Columns>\n          { detail ?\n            <Columns.Column size={12}>\n              <Card>\n                <Card.Content>\n                  <Content>\n                    <h1>{detail.name}</h1>\n                    <p><span>Classification: </span>{detail.classification}</p>\n                    <p><span>Eye Colors:</span> {detail.eye_colors}</p>\n                    <p><span>Hair Colors:</span> {detail.hair_colors}</p>\n                  </Content>\n                </Card.Content>\n              </Card>\n            </Columns.Column>\n            :\n            <LoaderWrapper/>\n          }\n        </Columns>\n      </Container>\n    )\n    \n  }\n\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    species: state.species.data\n  }\n}\n\nfunction mapDispatchToProps(dispatch: any) {\n  return bindActionCreators({ fetchSpecies }, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SpeciesDetail)","import { VehiclesActionTypes } from './types'\nimport { mergeArray } from '../../utils/mergeArray'\nimport vehiclesImage from '../../data/vehicles.json'\n\nconst API_BASE = 'https://ghibliapi.herokuapp.com'\nconst VEHICLES_API = `${API_BASE}/vehicles?limit=10`\n\nexport function fetchVehicles() {\n  return function(dispatch: any) {\n    return fetch(VEHICLES_API)\n      .then(response => {\n        if (response.ok) {\n          return response.json()\n        } else {\n          throw new Error('There is something wrong')\n        }\n      })\n      .then(vehicles => {\n        dispatch(vehiclesDispatch(vehicles))\n      })\n      .catch((error: string) => {\n        console.error(error)\n      })\n  }\n}\n\nconst vehiclesDispatch = (vehicles: any) => ({\n  type: VehiclesActionTypes.FETCH_VEHICLES,\n  payload: mergeArray(vehicles, vehiclesImage, 'id')\n})","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { fetchVehicles } from '../../store/vehicles/actions'\nimport { Link } from 'react-router-dom'\nimport { Container, Columns, Content, Card, Image } from 'react-bulma-components'\nimport LoaderWrapper from '../../components/Loader'\n\ninterface TProps {\n  vehicles: any,\n  fetchVehicles: any\n}\ninterface TState {\n}\nclass Vehicles extends Component<TProps, TState> {\n  constructor(props: any) {\n    super(props)\n  }\n\n  componentDidMount() {\n    this.props.fetchVehicles()\n  }\n\n  render() {\n    const { vehicles } = this.props\n\n    return (\n      <Container className=\"container--vehicle\">\n        <h1 className=\"container__header\">List of vehicles in Ghibli's film</h1>\n        <Columns>\n          {\n            vehicles.length !== 0 ?\n              vehicles.map((vehicle: any, index: number) => {\n                return (\n                  <Columns.Column key={index} size={12}>\n                    <Link to={{ pathname: `vehicles/${vehicle.id}` }}>\n                      <Card>\n                        <Card.Content>\n                          <Image src={vehicle.image} alt={vehicle.name} className=\"is-128x128\" />\n                          <Content>\n                            <h1>{vehicle.name}</h1>\n                            <p><span>Description:</span> {vehicle.description}</p>\n                            <p><span>Vehicles Class:</span> {vehicle.vehicles_colors}</p>\n                            <p><span>Length:</span> {vehicle.length}</p>\n                          </Content>\n                        </Card.Content>\n                      </Card>\n                    </Link>\n                  </Columns.Column>\n                )\n              })\n              :\n              <LoaderWrapper />\n          }\n        </Columns>\n\n      </Container>\n    );\n  }\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    vehicles: state.vehicles.data\n  }\n}\n\nfunction mapDispatchToProps(dispatch: any) {\n  return bindActionCreators({ fetchVehicles }, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Vehicles)\n","import React, { Component} from 'react';\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { fetchVehicles } from '../../store/vehicles/actions'\nimport { Container, Columns, Content, Card, Image } from 'react-bulma-components'\nimport LoaderWrapper from '../../components/Loader'\n\ninterface TProps {\n  vehicles: any,\n  fetchVehicles: any,\n  match: any\n}\n\ninterface TState {\n  data: any\n}\n\nclass VehicleDetail extends Component<TProps, TState> {\n  constructor(props: any) {\n    super(props)\n  }\n\n  componentDidMount() {\n    this.props.fetchVehicles()\n  }\n\n  render() {\n    const { vehicles } = this.props;\n    const detail = vehicles.find((vehicle: any) => vehicle.id === this.props.match.params.id)\n    \n    return (\n      <Container className=\"container--vehicle\">\n        <h1 className=\"container__header\">Vehicle Detail</h1>\n        <Columns>\n          { detail ?\n            <Columns.Column size={12}>\n              <Card>\n                <Card.Content>\n                  <Image src={detail.image} alt={detail.name} className=\"is-128x128\" />\n                  <Content>\n                    <h1>{detail.name}</h1>\n                    <p><span>Description:</span> {detail.description}</p>\n                    <p><span>Vehicle Class:</span> {detail.vehicle_class}</p>\n                    <p><span>Length:</span> {detail.length}</p>\n                  </Content>\n                </Card.Content>\n              </Card>\n            </Columns.Column>\n            :\n            <LoaderWrapper />\n          }\n        </Columns>\n      </Container>\n    )\n    \n  }\n\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    vehicles: state.vehicles.data\n  }\n}\n\nfunction mapDispatchToProps(dispatch: any) {\n  return bindActionCreators({ fetchVehicles }, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(VehicleDetail)","import * as React from 'react'\n// import App from './App'\nimport FilmsPage from './pages/films/Films'\nimport FilmDetail from './pages/films/FilmDetail'\nimport PeoplesPage from './pages/peoples/Peoples'\nimport PeoplesDetail from './pages/peoples/PeopleDetail'\nimport LocationsPage from './pages/locations/Locations'\nimport LocationDetail from './pages/locations/LocationDetail'\nimport SpeciesPage from './pages/species/Species'\nimport SpeciesDetail from './pages/species/SpeciesDetail'\nimport VehiclesPage from './pages/vehicles/Vehicles'\nimport VehicleDetail from './pages/vehicles/VehicleDetail'\nimport { Switch, Route } from 'react-router-dom'\n\n\nconst Routes: React.SFC = () => (\n  <Switch>\n    <Route exact path=\"/\" component={FilmsPage}/>\n    <Route exact path=\"/films/:id\" component={FilmDetail}/>\n    <Route exact path=\"/people\" component={PeoplesPage}/>\n    <Route exact path=\"/people/:id\" render={(props: any) => <PeoplesDetail {...props}/>}/>\n    <Route exact path=\"/locations\" component={LocationsPage}/>\n    <Route exact path=\"/locations/:id\" component={LocationDetail}/>\n    <Route exact path=\"/species\" component={SpeciesPage}/>\n    <Route exact path=\"/species/:id\" component={SpeciesDetail}/>\n    <Route exact path=\"/vehicles\" component={VehiclesPage}/>\n    <Route exact path=\"/vehicles/:id\" component={VehicleDetail}/>\n  </Switch>\n)\n\nexport default Routes\n\n\n\n","import * as React from 'react';\nimport Routers from './routes'\n\nconst Main: React.SFC = () => (\n  <main>\n    <Routers/>\n  </main>\n)\n\nexport default Main;","import * as React from 'react';\nimport Header from './components/Header'\nimport Main from './Main'\n\nconst App: React.SFC = () => (\n  <div>\n    <Header/>\n    <Main/>\n  </div>\n)\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { BrowserRouter } from 'react-router-dom'\nimport reducers from './store'\nimport './styles/app.scss';\nimport 'react-bulma-components/dist/react-bulma-components.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducers, applyMiddleware(thunk))\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </BrowserRouter>\n  </Provider>,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}