{"version":3,"sources":["assets/studio-ghibli-logo.png","store/films/types.ts","store/films/reducers.ts","store/peoples/types.ts","store/peoples/reducers.ts","store/locations/types.ts","store/locations/reducers.ts","store/species/types.ts","store/species/reducers.ts","store/vehicles/types.ts","store/vehicles/reducers.ts","store/index.ts","components/Header.tsx","utils/mergeArray.ts","store/films/actions.ts","components/Loader.tsx","pages/films/Films.tsx","pages/films/FilmDetail.tsx","store/peoples/actions.ts","pages/peoples/Peoples.tsx","pages/peoples/PeopleDetail.tsx","store/locations/actions.ts","pages/locations/Locations.tsx","pages/locations/LocationDetail.tsx","store/species/actions.ts","pages/species/Species.tsx","pages/species/SpeciesDetail.tsx","store/vehicles/actions.ts","pages/vehicles/Vehicles.tsx","pages/vehicles/VehicleDetail.tsx","routes.tsx","Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","FilmsActionTypes","PeoplesActionTypes","initialState","data","LocationsActionTypes","SpeciesActionTypes","VehiclesActionTypes","rootReducer","combineReducers","peoples","state","arguments","length","undefined","action","type","FETCH_PEOPLES","Object","objectSpread","payload","FETCH_DETAIL_PEOPLE","concat","toConsumableArray","films","FETCH_FILMS","locations","FETCH_LOCATIONS","species","FETCH_SPECIES","vehicles","FETCH_VEHICLES","Header","props","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","className","dist","style","marginBottom","Brand","src","GhibliIcon","alt","Menu","NavLink","exact","to","Component","mergeArray","source","merge","by","map","item","find","i","FILM_API","fetchFilms","dispatch","fetch","then","response","ok","json","Error","filmsDispatch","catch","error","console","filmsImage","LoaderWrapper","width","height","border","borderTopColor","borderRightColor","Films","react","film","index","Column","key","size","Link","id","Content","image","name","title","release_date","description","Loader","React","connect","bindActionCreators","FilmDetail","_this","detail","match","params","director","producer","rt_score","PEOPLE_API","peoplesFetchRequest","addFetchPeople","peoplesImage","Peoples","isLoading","people","gender","age","eye_color","hair_color","PeopleDetail","_this2","LOCATIONS_API","fetchLocations","locationsDispatch","locationImage","Locations","location","pathname","climate","terrain","surface_water","LocationDetail","SPECIES_API","fetchSpecies","speciesDispatch","Species","specie","classification","eye_colors","hair_colors","SpeciesDetail","VEHICLES_API","fetchVehicles","vehiclesDispatch","vehiclesImage","Vehicles","vehicle","vehicles_colors","VehicleDetail","vehicle_class","Routes","Switch","Route","path","component","FilmsPage","PeoplesPage","render","peoples_PeopleDetail","LocationsPage","SpeciesPage","VehiclesPage","Main","routes","App","components_Header","src_Main","Boolean","window","hostname","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","es","BrowserRouter","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.87820894.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/studio-ghibli-logo.f456ee18.png\";","export enum FilmsActionTypes {\n  FETCH_FILMS = 'FETCH_FILMS',\n  FETCH_DETAIL_FILMS = 'FETCH_DETAIL_FILMS'\n}","import { FilmsActionTypes } from './types'\n\nconst initialState: any = {\n  data: []\n}\n\nexport default function(state = initialState, action: any) {\n  switch(action.type) {\n    case FilmsActionTypes.FETCH_FILMS:\n      return {...state, data: action.payload}\n    default:\n      return state\n  }\n}","export enum PeoplesActionTypes{\n  FETCH_PEOPLES = 'FETCH_PEOPLES',\n  FETCH_DETAIL_PEOPLE = 'FETCH_DETAIL_PEOPLE'\n}","import { PeoplesActionTypes } from './types'\n\nlet initialState: any = {\n  data: []\n}\n\nexport default function peoplesReducer(state = initialState, action: any) {\n  switch(action.type) {\n    case PeoplesActionTypes.FETCH_PEOPLES:\n      return {...state, data: action.payload}\n    case PeoplesActionTypes.FETCH_DETAIL_PEOPLE:\n      // return Object.assign({}, state, action.payload)\n      return [...state, action.payload]\n    default:\n      return state\n  }\n}","export enum LocationsActionTypes {\n  FETCH_LOCATIONS = 'FETCH_LOCATIONS',\n  FETCH_DETAIL_LOCATIONS = 'FETCH_DETAIL_LOCATIONS'\n}","import { LocationsActionTypes } from './types'\n\nconst initialState: any = {\n  data: []\n}\n\nexport default function(state = initialState, action: any) {\n  switch(action.type) {\n    case LocationsActionTypes.FETCH_LOCATIONS:\n      return {...state, data: action.payload}\n    default:\n      return state\n  }\n}","export enum SpeciesActionTypes {\n  FETCH_SPECIES = 'FETCH_SPECIES',\n  FETCH_DETAIL_SPECIES = 'FETCH_DETAIL_SPECIES'\n}","import { SpeciesActionTypes } from './types'\n\nconst initialState: any = {\n  data: []\n}\n\nexport default function(state = initialState, action: any) {\n  switch(action.type) {\n    case SpeciesActionTypes.FETCH_SPECIES:\n      return {...state, data: action.payload}\n    default:\n      return state\n  }\n}","export enum VehiclesActionTypes {\n  FETCH_VEHICLES = 'FETCH_VEHICLES',\n  FETCH_DETAIL_VEHICLES = 'FETCH_DETAIL_VEHICLES'\n}","import { VehiclesActionTypes } from './types'\n\nconst initialState: any = {\n  data: []\n}\n\nexport default function(state = initialState, action: any) {\n  switch(action.type) {\n    case VehiclesActionTypes.FETCH_VEHICLES:\n      return {...state, data: action.payload}\n    default:\n      return state\n  }\n}","import { combineReducers } from 'redux'\nimport filmsReducer from './films/reducers'\nimport peoplesReducer from './peoples/reducers'\nimport locationsReducer from './locations/reducers'\nimport speciesReducer from './species/reducers'\nimport vehiclesReducer from './vehicles/reducers'\n\nconst rootReducer = combineReducers({\n  peoples: peoplesReducer,\n  films: filmsReducer,\n  locations: locationsReducer,\n  species: speciesReducer,\n  vehicles: vehiclesReducer\n})\n\nexport default rootReducer\n\n","import React, { Component } from 'react'\nimport { NavLink, Link } from 'react-router-dom'\nimport { Navbar, Container } from 'react-bulma-components'\nimport GhibliIcon from '../assets/studio-ghibli-logo.png'\n\nclass Header extends Component {\n  constructor(props: any) {\n    super(props)\n  }\n\n  render() {\n    return (\n      <div className=\"header\">\n        <Container>\n          <Navbar style={{ marginBottom: '20px'}}>\n            <Navbar.Brand>\n              <img src={GhibliIcon} alt=\"Ghibli's Studio\"/>\n            </Navbar.Brand>\n\n            <Navbar.Menu>\n              <NavLink exact to=\"/\">Films</NavLink>\n              <NavLink exact to=\"/people\">People</NavLink>\n              <NavLink exact to=\"/locations\">Locations</NavLink>\n              <NavLink exact to=\"/species\">Species</NavLink>\n              <NavLink exact to=\"/vehicles\">Vehicles</NavLink>\n            </Navbar.Menu>\n          </Navbar>\n        </Container>\n      </div>\n    )\n  }\n}\n\nexport default Header;","export const mergeArray = (source: any, merge: any, by: any) => source.map((item: any) => ({\n  ...item,\n  ...(merge.find((i: any) => i[by] === item[by]) || {}),\n}))","import { FilmsActionTypes } from './types'\nimport { mergeArray } from '../../utils/mergeArray'\nimport filmsImage from '../../data/films.json'\n\nconst API_BASE = 'https://ghibliapi.herokuapp.com'\nconst FILM_API = `${API_BASE}/films`\n\nexport function fetchFilms() {\n  return function(dispatch: any) {\n    return fetch(FILM_API)\n      .then(response => {\n        if (response.ok) {\n          return response.json()\n        } else {\n          throw new Error('There is something wrong')\n        }\n      })\n      .then(films => {\n        dispatch(filmsDispatch(films))\n      })\n      .catch((error: string) => {\n        console.error(error)\n      })\n  }\n}\n\nconst filmsDispatch = (films: any) => ({\n  type: FilmsActionTypes.FETCH_FILMS,\n  payload: mergeArray(films, filmsImage, 'id')\n})","import React from 'react'\nimport { Loader } from 'react-bulma-components'\n\nconst LoaderWrapper = () => {\n  return (\n    <div className=\"loader-container\">\n      <Loader\n        style={{\n          width: 50,\n          height: 50,\n          border: '3px solid #dbdbdb',\n          borderTopColor: 'transparent',\n          borderRightColor: 'transparent'\n        }}\n      />\n    </div>\n  )\n}\n\nexport default LoaderWrapper","import * as React from 'react';\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { fetchFilms } from '../../store/films/actions'\nimport { Link } from 'react-router-dom'\nimport { Container, Columns, Content, Card, Image } from 'react-bulma-components'\nimport LoaderWrapper from '../../components/Loader'\n\ninterface TProps {\n  films: [],\n  fetchFilms: () => void\n}\n\ninterface TState {\n}\n\ninterface TFilm {\n  id: number,\n  image: string,\n  name: string,\n  title: string,\n  release_date: string,\n  description: string\n}\n\nclass Films extends React.Component<TProps, TState> {\n  constructor(props: any) {\n    super(props)\n  }\n\n  componentDidMount() {\n    this.props.fetchFilms()\n  }\n\n  render(): React.ReactNode {\n    const { films } = this.props\n\n    return (\n      <Container className=\"container--film\">\n        <h1 className=\"container__header\">List of Ghibli's Films</h1>\n        <Columns>\n          {\n            films ?\n            films.map((film: TFilm, index: number) => {\n              return (\n                <Columns.Column key={index} size={12}>\n                  <Link to={`/films/${film.id}`}>\n                    <Card>\n                      <Card.Content>\n                        <Image src={film.image} alt={film.name} className=\"is-128x128\" />\n                        <Content>\n                          <h1>{film.title} <span>({film.release_date})</span></h1>\n                          <p>{film.description}</p>\n                        </Content>\n                      </Card.Content>\n                    </Card>\n                  </Link>\n                </Columns.Column>\n              )\n            })\n            :\n            <LoaderWrapper />\n          }\n        </Columns>\n      </Container>\n    );\n  }\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    films: state.films.data\n  }\n}\n\nfunction mapDispatchToProps(dispatch: any) {\n  return bindActionCreators({ fetchFilms }, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Films)\n","import React, { Component} from 'react';\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { fetchFilms } from '../../store/films/actions'\nimport { Container, Columns, Content, Card, Image } from 'react-bulma-components'\nimport LoaderWrapper from '../../components/Loader'\n\ninterface TProps {\n  films: any,\n  fetchFilms: any,\n  match: any\n}\n\ninterface TState {\n}\n\nclass FilmDetail extends Component<TProps, TState> {\n  constructor(props: any) {\n    super(props)\n\n  }\n\n  componentDidMount() {\n    this.props.fetchFilms()\n  }\n\n  render() {\n    const { films } = this.props;\n    const detail = films.find((film: any) => film.id === this.props.match.params.id)\n    \n    return (\n      <Container>\n        <h1 className=\"container__header\">Film Detail</h1>\n        <Columns>\n          { detail ?\n            <Columns.Column size={12}>\n              <Card>\n                <Card.Content>\n                  <Image src={detail.image} alt={detail.name} className=\"is-128x128\" />\n                  <Content>\n                    <h1>{detail.title}</h1>\n                    <p className=\"detail-description\">{detail.description}</p>\n                    <p><span>Director:</span> {detail.director}</p>\n                    <p><span>Producer:</span> {detail.producer}</p>\n                    <p><span>Release Date:</span> {detail.release_date}</p>\n                    <p><span>RT Score:</span> {detail.rt_score}</p>\n                  </Content>\n                </Card.Content>\n              </Card>\n            </Columns.Column>\n            :\n            <LoaderWrapper/>\n          }\n        </Columns>\n      </Container>\n    )\n    \n  }\n\n}\nfunction mapStateToProps(state: any) {\n  return {\n    films: state.films.data\n  }\n}\n\nfunction mapDispatchToProps(dispatch: any) {\n  return bindActionCreators({ fetchFilms }, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FilmDetail)","import { PeoplesActionTypes } from './types'\nimport { mergeArray } from '../../utils/mergeArray'\nimport peoplesImage from '../../data/peoples.json'\n\nconst API_BASE = 'https://ghibliapi.herokuapp.com'\nconst PEOPLE_API = `${API_BASE}/people?limit=10`\n\nexport function peoplesFetchRequest() {\n  return function(dispatch: any) {\n    return fetch(PEOPLE_API)\n      .then(response => {\n        if (response.ok) {\n          return response.json()\n        } else {\n          throw new Error('There is something wrong')\n        }\n      })\n      .then(data => {\n        dispatch(addFetchPeople(data))\n      })\n      .catch((error: string) => {\n        console.error(error)\n      })\n  }\n}\n\n\nconst addFetchPeople = (data: any) => ({\n  type: PeoplesActionTypes.FETCH_PEOPLES,\n  payload: mergeArray(data, peoplesImage, 'id')\n})\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { peoplesFetchRequest } from '../../store/peoples/actions'\nimport { Route , Link } from 'react-router-dom'\n\nimport { Container, Columns, Content, Card, Image } from 'react-bulma-components'\nimport LoaderWrapper from '../../components/Loader'\nimport peoplesImage from '../../data/peoples.json'\n\n// const API_BASE = 'https://ghibliapi.herokuapp.com'\n// const PEOPLE_API = `${API_BASE}/people?limit=10`\n\n\ninterface TProps {\n  dispatch: any,\n  peoplesFetchRequest: any,\n  peoples: any\n}\ninterface TState {\n  data: any,\n  peoplesFetchRequest: any,\n  isLoading: boolean,\n  error: null\n}\nclass Peoples extends Component<TProps, TState> {\n  constructor(props: any) {\n    super(props)\n\n    this.state = {\n      data: null,\n      isLoading: false,\n      peoplesFetchRequest: null,\n      error: null\n    }\n  }\n\n  componentWillMount() {\n    this.props.peoplesFetchRequest()\n  }\n\n  // getData() {\n  //   fetch(PEOPLE_API)\n  //     .then(response => {\n  //       if (response.ok) {\n  //         return response.json()\n  //       } else {\n  //         throw new Error('Something went wrong')\n  //       }\n  //     })\n  //     .then((data) => {\n  //       this.setState({\n  //         data\n  //       })\n  //     })\n  //     .catch((error) => {\n  //       this.setState({\n  //         error,\n  //         isLoading: false\n  //       })\n  //     })\n  // }\n\n  render() {\n    const { peoples } = this.props\n    // if (error) {\n    //   return <p>{error}</p>\n    // }\n\n    // if (isLoading) {\n    //   return <p>Loading..</p>\n    // }\n\n    return (\n      <Container className=\"container--people\">\n        <h1 className=\"container__header\">List of character in Ghibli's film</h1>\n        <Columns>\n          {\n            peoples ?\n              peoples.map((people: any, index: number) => {\n                return (\n                  <Columns.Column key={index} size={12}>\n                    <Link to={`people/${people.id}`}>\n                      <Card>\n                        <Card.Content>\n                          <Image src={people.image} alt={people.name} className=\"is-128x128\"/>\n                          <Content>\n                            <h1>{people.name}</h1>\n                            <p><span>Gender:</span> {people.gender}</p>\n                            <p><span>Age:</span> {people.age}</p>\n                            <p><span>Eye Color:</span> {people.eye_color}</p>\n                            <p><span>Hair Color:</span> {people.hair_color}</p>\n                          </Content>\n                        </Card.Content>\n                      </Card>\n                    </Link>\n                  </Columns.Column>\n                )\n              })\n              :\n              <LoaderWrapper/>\n          }\n        </Columns>\n      </Container>\n    );\n  }\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    peoples: state.peoples.data\n  }\n}\n\nfunction mapDispatchToProps(dispatch: any) {\n  return bindActionCreators({peoplesFetchRequest}, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Peoples);\n","import React, { Component} from 'react';\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { peoplesFetchRequest } from '../../store/peoples/actions'\nimport { Container, Columns, Content, Card, Image } from 'react-bulma-components'\nimport LoaderWrapper from '../../components/Loader'\n\ninterface TProps {\n  peoples: any,\n  peoplesFetchRequest: any,\n  peopleDetailFetch: any,\n  fetchPeoples: any,\n  match: any,\n  fetchDetail: any\n}\n\ninterface TState {\n  detail: any\n}\n\nclass PeopleDetail extends Component<TProps, TState> {\n  constructor(props: any) {\n    super(props)\n    \n    this.state = {\n      detail: undefined\n    }\n  }\n\n  componentDidMount() {\n    this.props.peoplesFetchRequest()\n  }\n\n  render() {\n    const { peoples } = this.props;\n    const detail = peoples.find((people: any) => people.id === this.props.match.params.id)\n\n    return (\n      <Container className=\"container--people\">\n        <h1 className=\"container__header\">Character Detail</h1>\n        <Columns>\n          { detail ?\n            <Columns.Column size={12}>\n                <Card>\n                  <Card.Content>\n                      <Image src={detail.image} alt={detail.name} className=\"is-128x128\"/>\n                      <Content>\n                        <h1>{detail.name}</h1>\n                        <p>Age: {detail.age}</p>\n                        <p>Gender: {detail.gender}</p>\n                        <p>Eye Color: {detail.eye_color}</p>\n                      </Content>\n                  </Card.Content>\n                </Card>\n            </Columns.Column>\n            :\n            <LoaderWrapper/>\n          }\n        </Columns>\n      </Container>\n    )\n    \n  }\n\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    peoples: state.peoples.data\n  }\n}\n\nfunction mapDispatchToProps(dispatch: any) {\n  return bindActionCreators({ peoplesFetchRequest}, dispatch)\n  // ...bindActionCreators({ peoplesFetchRequest, peopleDetailFetch }, dispatch)\n    \n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PeopleDetail)","import { LocationsActionTypes } from './types'\nimport { mergeArray } from '../../utils/mergeArray'\nimport locationImage from '../../data/locations.json'\n\nconst API_BASE = 'https://ghibliapi.herokuapp.com'\nconst LOCATIONS_API = `${API_BASE}/locations?limit=10`\n\nexport function fetchLocations() {\n  return function(dispatch: any) {\n    return fetch(LOCATIONS_API)\n      .then(response => {\n        if (response.ok) {\n          return response.json()\n        } else {\n          throw new Error('There is something wrong')\n        }\n      })\n      .then(locations => {\n        dispatch(locationsDispatch(locations))\n      })\n      .catch((error: string) => {\n        console.error(error)\n      })\n  }\n}\n\nconst locationsDispatch = (locations: any) => ({\n  type: LocationsActionTypes.FETCH_LOCATIONS,\n  payload: mergeArray(locations, locationImage, 'id')\n})","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { fetchLocations } from '../../store/locations/actions'\nimport { Link } from 'react-router-dom'\nimport { Container, Columns, Content, Card, Image } from 'react-bulma-components'\nimport LoaderWrapper from '../../components/Loader'\n\ninterface TProps {\n  locations: any,\n  fetchLocations: any\n}\ninterface TState {\n  data: any,\n  isLoading: boolean,\n  error: null\n}\nclass Locations extends Component<TProps, TState> {\n  constructor(props: any) {\n    super(props)\n\n    this.state = {\n      data: null,\n      isLoading: false,\n      error: null\n    }\n  }\n\n  componentDidMount() {\n    this.props.fetchLocations()\n  }\n\n  render() {\n    const { locations } = this.props\n\n    return (\n      <Container className=\"container--location\">\n        <h1 className=\"container__header\">List of location in Ghibli's film</h1>\n        <Columns>\n          {\n            locations ?\n              locations.map((location: any, index: number) => {\n                return (\n                  <Columns.Column key={index} size={12}>\n                    <Link to={{ pathname: `locations/${location.id}`}}>\n                      <Card>\n                        <Card.Content>\n                          <Image src={location.image} alt={location.name} className=\"is-128x128\" />\n                          <Content>\n                            <h1>{location.name}</h1>\n                            <p><span>Climate:</span> {location.climate}</p>\n                            <p><span>Terrain:</span> {location.terrain}</p>\n                            <p><span>Surface Water:</span> {location.surface_water}</p>\n                          </Content>\n                        </Card.Content>\n                      </Card>\n                    </Link>\n                  </Columns.Column>\n                )\n              })\n              :\n              <LoaderWrapper/>\n          }\n        </Columns>\n\n      </Container>\n    );\n  }\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    locations: state.locations.data\n  }\n}\n\nfunction mapDispatchToProps(dispatch: any) {\n  return bindActionCreators({ fetchLocations }, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Locations)\n","import React, { Component} from 'react';\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { fetchLocations } from '../../store/locations/actions'\nimport { Container, Columns, Content, Card, Image } from 'react-bulma-components'\nimport LoaderWrapper from '../../components/Loader'\n\ninterface TProps {\n  locations: any,\n  fetchLocations: any,\n  match: any\n}\n\ninterface TState {\n  data: any\n}\n\nclass LocationDetail extends Component<TProps, TState> {\n  constructor(props: any) {\n    super(props)\n  }\n\n  componentDidMount() {\n    this.props.fetchLocations()\n  }\n\n  render() {\n    const { locations } = this.props;\n    const detail = locations.find((location: any) => location.id === this.props.match.params.id)\n    \n    return (\n      <Container className=\"container--location\">\n        <h1 className=\"container__header\">Location Description</h1>\n        <Columns>\n          { detail ?\n            <Columns.Column size={12}>\n              <Card>\n                <Card.Content>\n                  <Image src={detail.image} alt={detail.name} className=\"is-128x128\" />\n                  <Content>\n                    <h1>{detail.name}</h1>\n                    <p><span>Climate:</span> {detail.climate}</p>\n                    <p><span>Terrain:</span> {detail.terrain}</p>\n                    <p><span>Surface Water:</span> {detail.surface_water}</p>\n                  </Content>\n                </Card.Content>\n              </Card>\n            </Columns.Column>\n            :\n            <LoaderWrapper />\n          }\n        </Columns>\n      </Container>\n    )\n  }\n\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    locations: state.locations.data\n  }\n}\n\nfunction mapDispatchToProps(dispatch: any) {\n  return bindActionCreators({ fetchLocations }, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LocationDetail)","import { SpeciesActionTypes } from './types'\n\nconst API_BASE = 'https://ghibliapi.herokuapp.com'\nconst SPECIES_API = `${API_BASE}/species?limit=10`\n\nexport function fetchSpecies() {\n  return function(dispatch: any) {\n    return fetch(SPECIES_API)\n      .then(response => {\n        if (response.ok) {\n          return response.json()\n        } else {\n          throw new Error('There is something wrong')\n        }\n      })\n      .then(species => {\n        dispatch(speciesDispatch(species))\n      })\n      .catch((error: string) => {\n        console.error(error)\n      })\n  }\n}\n\nconst speciesDispatch = (species: any) => ({\n  type: SpeciesActionTypes.FETCH_SPECIES,\n  payload: species\n})","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { fetchSpecies } from '../../store/species/actions'\nimport { Link } from 'react-router-dom'\nimport { Container, Columns, Content, Card, Image } from 'react-bulma-components'\nimport LoaderWrapper from '../../components/Loader'\n\ninterface TProps {\n  species: any,\n  fetchSpecies: any\n}\ninterface TState {\n  data: any,\n  isLoading: boolean,\n  error: null\n}\nclass Species extends Component<TProps, TState> {\n  constructor(props: any) {\n    super(props)\n\n    this.state = {\n      data: null,\n      isLoading: false,\n      error: null\n    }\n  }\n\n  componentDidMount() {\n    this.props.fetchSpecies()\n  }\n\n  render() {\n    const { species } = this.props\n\n    return (\n      <Container className=\"container--species\">\n        <h1 className=\"container__header\">List of species in Ghibli's film</h1>\n        <Columns>\n          {\n            species ?\n              species.map((specie: any, index: number) => {\n                return (\n                  <Columns.Column key={index} size={12}>\n                    <Link to={{ pathname: `species/${specie.id}`}}>\n                      <Card>\n                        <Card.Content>\n                          <Content>\n                            <h1>{specie.name}</h1>\n                            <p><span>Classification:</span> {specie.classification}</p>\n                            <p><span>Eye Colors:</span> {specie.eye_colors}</p>\n                            <p><span>Hair Colors:</span> {specie.hair_colors}</p>\n                          </Content>\n                        </Card.Content>\n                      </Card>\n                    </Link>\n                  </Columns.Column>\n                )\n              })\n              :\n              <LoaderWrapper/>\n          }\n        </Columns>\n\n      </Container>\n    );\n  }\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    species: state.species.data\n  }\n}\n\nfunction mapDispatchToProps(dispatch: any) {\n  return bindActionCreators({ fetchSpecies }, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Species)\n","import React, { Component} from 'react';\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { fetchSpecies } from '../../store/species/actions'\nimport { Container, Columns, Content, Card, Image } from 'react-bulma-components'\nimport LoaderWrapper from '../../components/Loader'\n\ninterface TProps {\n  species: any,\n  fetchSpecies: any,\n  match: any\n}\n\ninterface TState {\n  data: any\n}\n\nclass SpeciesDetail extends Component<TProps, TState> {\n  constructor(props: any) {\n    super(props)\n    \n    this.state = {\n      data: {}\n    }\n  }\n\n  componentDidMount() {\n    this.props.fetchSpecies()\n  }\n\n  render() {\n    const { species } = this.props;\n    const detail = species.find((specie: any) => specie.id === this.props.match.params.id)\n    \n    return (\n      <Container className=\"container--species\">\n        <h1 className=\"container__header\">Species Description</h1>\n        <Columns>\n          { detail ?\n            <Columns.Column size={12}>\n              <Card>\n                <Card.Content>\n                  <Content>\n                    <h1>{detail.name}</h1>\n                    <p><span>Classification: </span>{detail.classification}</p>\n                    <p><span>Eye Colors:</span> {detail.eye_colors}</p>\n                    <p><span>Hair Colors:</span> {detail.hair_colors}</p>\n                  </Content>\n                </Card.Content>\n              </Card>\n            </Columns.Column>\n            :\n            <LoaderWrapper/>\n          }\n        </Columns>\n      </Container>\n    )\n    \n  }\n\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    species: state.species.data\n  }\n}\n\nfunction mapDispatchToProps(dispatch: any) {\n  return bindActionCreators({ fetchSpecies }, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SpeciesDetail)","import { VehiclesActionTypes } from './types'\nimport { mergeArray } from '../../utils/mergeArray'\nimport vehiclesImage from '../../data/vehicles.json'\n\nconst API_BASE = 'https://ghibliapi.herokuapp.com'\nconst VEHICLES_API = `${API_BASE}/vehicles?limit=10`\n\nexport function fetchVehicles() {\n  return function(dispatch: any) {\n    return fetch(VEHICLES_API)\n      .then(response => {\n        if (response.ok) {\n          return response.json()\n        } else {\n          throw new Error('There is something wrong')\n        }\n      })\n      .then(vehicles => {\n        dispatch(vehiclesDispatch(vehicles))\n      })\n      .catch((error: string) => {\n        console.error(error)\n      })\n  }\n}\n\nconst vehiclesDispatch = (vehicles: any) => ({\n  type: VehiclesActionTypes.FETCH_VEHICLES,\n  payload: mergeArray(vehicles, vehiclesImage, 'id')\n})","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { fetchVehicles } from '../../store/vehicles/actions'\nimport { Link } from 'react-router-dom'\nimport { Container, Columns, Content, Card, Image } from 'react-bulma-components'\nimport LoaderWrapper from '../../components/Loader'\n\ninterface TProps {\n  vehicles: any,\n  fetchVehicles: any\n}\ninterface TState {\n  data: any,\n  isLoading: boolean,\n  error: null\n}\nclass Vehicles extends Component<TProps, TState> {\n  constructor(props: any) {\n    super(props)\n\n    this.state = {\n      data: null,\n      isLoading: false,\n      error: null\n    }\n  }\n\n  componentDidMount() {\n    this.props.fetchVehicles()\n  }\n\n  render() {\n    const { vehicles } = this.props\n\n    return (\n      <Container className=\"container--vehicle\">\n        <h1 className=\"container__header\">List of vehicles in Ghibli's film</h1>\n        <Columns>\n          {\n            vehicles ?\n              vehicles.map((vehicle: any, index: number) => {\n                return (\n                  <Columns.Column key={index} size={12}>\n                    <Link to={{ pathname: `vehicles/${vehicle.id}` }}>\n                      <Card>\n                        <Card.Content>\n                          <Image src={vehicle.image} alt={vehicle.name} className=\"is-128x128\" />\n                          <Content>\n                            <h1>{vehicle.name}</h1>\n                            <p><span>Description:</span> {vehicle.description}</p>\n                            <p><span>Vehicles Class:</span> {vehicle.vehicles_colors}</p>\n                            <p><span>Length:</span> {vehicle.length}</p>\n                          </Content>\n                        </Card.Content>\n                      </Card>\n                    </Link>\n                  </Columns.Column>\n                )\n              })\n              :\n              <LoaderWrapper />\n          }\n        </Columns>\n\n      </Container>\n    );\n  }\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    vehicles: state.vehicles.data\n  }\n}\n\nfunction mapDispatchToProps(dispatch: any) {\n  return bindActionCreators({ fetchVehicles }, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Vehicles)\n","import React, { Component} from 'react';\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { fetchVehicles } from '../../store/vehicles/actions'\nimport { Container, Columns, Content, Card, Image } from 'react-bulma-components'\nimport LoaderWrapper from '../../components/Loader'\n\ninterface TProps {\n  vehicles: any,\n  fetchVehicles: any,\n  match: any\n}\n\ninterface TState {\n  data: any\n}\n\nclass VehicleDetail extends Component<TProps, TState> {\n  constructor(props: any) {\n    super(props)\n  }\n\n  componentDidMount() {\n    this.props.fetchVehicles()\n  }\n\n  render() {\n    const { vehicles } = this.props;\n    const detail = vehicles.find((vehicle: any) => vehicle.id === this.props.match.params.id)\n    \n    return (\n      <Container className=\"container--vehicle\">\n        <h1 className=\"container__header\">Vehicle Detail</h1>\n        <Columns>\n          { detail ?\n            <Columns.Column size={12}>\n              <Card>\n                <Card.Content>\n                  <Image src={detail.image} alt={detail.name} className=\"is-128x128\" />\n                  <Content>\n                    <h1>{detail.name}</h1>\n                    <p><span>Description:</span> {detail.description}</p>\n                    <p><span>Vehicle Class:</span> {detail.vehicle_class}</p>\n                    <p><span>Length:</span> {detail.length}</p>\n                  </Content>\n                </Card.Content>\n              </Card>\n            </Columns.Column>\n            :\n            <LoaderWrapper />\n          }\n        </Columns>\n      </Container>\n    )\n    \n  }\n\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    vehicles: state.vehicles.data\n  }\n}\n\nfunction mapDispatchToProps(dispatch: any) {\n  return bindActionCreators({ fetchVehicles }, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(VehicleDetail)","import * as React from 'react'\n// import App from './App'\nimport FilmsPage from './pages/films/Films'\nimport FilmDetail from './pages/films/FilmDetail'\nimport PeoplesPage from './pages/peoples/Peoples'\nimport PeoplesDetail from './pages/peoples/PeopleDetail'\nimport LocationsPage from './pages/locations/Locations'\nimport LocationDetail from './pages/locations/LocationDetail'\nimport SpeciesPage from './pages/species/Species'\nimport SpeciesDetail from './pages/species/SpeciesDetail'\nimport VehiclesPage from './pages/vehicles/Vehicles'\nimport VehicleDetail from './pages/vehicles/VehicleDetail'\nimport { Switch, Route } from 'react-router-dom'\n\n\nconst Routes: React.SFC = () => (\n  <Switch>\n    <Route exact path=\"/\" component={FilmsPage}/>\n    <Route exact path=\"/films/:id\" component={FilmDetail}/>\n    <Route exact path=\"/people\" component={PeoplesPage}/>\n    <Route exact path=\"/people/:id\" render={(props: any) => <PeoplesDetail {...props}/>}/>\n    <Route exact path=\"/locations\" component={LocationsPage}/>\n    <Route exact path=\"/locations/:id\" component={LocationDetail}/>\n    <Route exact path=\"/species\" component={SpeciesPage}/>\n    <Route exact path=\"/species/:id\" component={SpeciesDetail}/>\n    <Route exact path=\"/vehicles\" component={VehiclesPage}/>\n    <Route exact path=\"/vehicles/:id\" component={VehicleDetail}/>\n  </Switch>\n)\n\nexport default Routes\n\n\n\n","import * as React from 'react';\nimport Routers from './routes'\n\nconst Main: React.SFC = () => (\n  <main>\n    <Routers/>\n  </main>\n)\n\nexport default Main;","import * as React from 'react';\nimport Header from './components/Header'\nimport Main from './Main'\nimport './styles/App.css';\n\nconst App: React.SFC = () => (\n  <div>\n    <Header/>\n    <Main/>\n  </div>\n)\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { BrowserRouter } from 'react-router-dom'\nimport Routes from './routes'\nimport reducers from './store'\nimport './styles/index.css';\nimport 'react-bulma-components/dist/react-bulma-components.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducers, applyMiddleware(thunk))\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}